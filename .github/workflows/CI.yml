name: CI-Integrate

on:
  workflow_call:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  _PROJECT: ${{ github.event.repository.name }}
  _USER: ${{ github.actor }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  api_key: ${{ secrets.API_KEY }}
  api_secret: ${{ secrets.API_SECRET }}
  consumer_key: ${{ secrets.CONSUMER_KEY }}
  consumer_secret: ${{ secrets.CONSUMER_SECRET }}
  bearer_token: ${{ secrets.BEARER_TOKEN }}
  access_token: ${{ secrets.ACCESS_TOKEN }}
  access_token_secret: ${{ secrets.ACCESS_TOKEN_SECRET }}
  API_VALID_KEY:
  API_VALID_SECRET:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: |
          poetry install --no-interaction
          poetry run python -m spacy download en_core_web_sm
      #----------------------------------------------
      #              run test suite
      #---------------------------------------------
      - name: Run tests
        run: |
          make test
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install project
        run: |
          poetry install --no-interaction
          poetry run python -m spacy download en_core_web_sm

      - name: Run check
        run: make lint

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install project
        run: |
          poetry install --no-interaction
          poetry run python -m spacy download en_core_web_sm
      - name: Run check
        run: make format

#  docker:
#    name: Docker
#    runs-on: ubuntu-latest
#    needs: [test, lint, format]
#    steps:
#      - uses: actions/checkout@v2
#      - name: docker build
#        env:
#          ssh_prv_key: ${{ secrets.SSH_PRIVATE_KEY_TO_REPO }}
#          ssh_pub_key: ${{ secrets.SSH_PUBLIC_KEY_TO_REPO }}
#        run: docker build -t example --build-arg ssh_prv_key="${{ secrets.SSH_PRIVATE_KEY_TO_REPO }}" --build-arg ssh_pub_key="${{ secrets.SSH_PUBLIC_KEY_TO_REPO }}" .
#
#      - name: docker run
#        env:
#          ALLOWED_HOSTS: ${{ secrets.TESTING_HOST_IP }}
#          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
#        run: docker run -d -p 8020:8020 example:latest
